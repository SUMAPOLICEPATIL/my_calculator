name: CI/CD Pipeline

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Verify source structure
        run: |
          echo "Project structure:"
          ls -R src || true

  format:
    name: Code Formatting Check (Black)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Black
        run: |
          pip install black

      - name: Run Black check
        run: |
          black --check src/ || true

  lint:
    name: Lint Code (Pylint)
    runs-on: ubuntu-latest
    needs: format
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Pylint
        run: |
          pip install pylint

      - name: Run Pylint
        run: |
          pylint src/ | tee pylint.log || true

      - name: Upload lint report
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: pylint.log
        continue-on-error: true

  security:
    name: Security Scan (Bandit)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Bandit
        run: |
          pip install bandit

      - name: Run Bandit scan
        run: |
          bandit -r src/ -f txt -o bandit-report.txt || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.txt
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies for tests
        run: |
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          pytest --cov=src --cov-report=term-missing --cov-report=html:artifacts/coverage-html || true

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: artifacts/coverage-html
        continue-on-error: true

  coverage:
    name: Code Coverage Summary
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-html
          path: artifacts/coverage-html
        continue-on-error: true

      - name: Display Coverage Summary
        run: |
          echo "Coverage report files:"
          ls -lh artifacts/coverage-html || true

  deploy:
    name: Deployment Package
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage artifact (if present)
        uses: actions/download-artifact@v4
        with:
          name: coverage-html
          path: artifacts/coverage-html
        continue-on-error: true

      - name: Download lint report (if present)
        uses: actions/download-artifact@v4
        with:
          name: lint-report
          path: artifacts/lint
        continue-on-error: true

      - name: Download security report (if present)
        uses: actions/download-artifact@v4
        with:
          name: security-report
          path: artifacts/security
        continue-on-error: true

      - name: "Build Deployment Package"
        run: |
          echo "Creating deployment package..."
          rm -f deployment-package.zip || true
          python -m compileall -b -f src || true
          zip -r deployment-package.zip src artifacts README.md requirements.txt || true
          echo "Created deployment-package.zip"
          ls -lh deployment-package.zip || true
          unzip -l deployment-package.zip || true

      - name: Upload Deployment Package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-zip
          path: deployment-package.zip
